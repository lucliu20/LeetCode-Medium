# https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/


"""
Example 1:
Input: s = "aaabb", k = 3
Output: 3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.

Example 2:
Input: s = "ababbc", k = 2
Output: 5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.
"""


# s, k = "aaabb", 3
# s, k = "ababbc", 2

# sentence = "thequickbrownfoxjumpsoverthelazydog"
# costs, coins = [1,3,2,4,1], 7
# costs, coins = [1,6,3,1,2,5], 20
# costs, coins = [7,3,3,6,6,6,10,5,9,2], 56 # 9

# import collections
# class Solution:
#     def longestSubstring(self, s: str, k: int) -> int:
#         count = collections.Counter(sentence)
#         if len(count) >= 26:
#             return True
#         return False

"""
from typing import List
class Solution:
    def maxIceCream(self, costs: List[int], coins: int) -> int:
        if sum(costs) <= coins: return len(costs)
        if min(costs) > coins: return 0
        costs.sort()
        res = 0
        for i in range(len(costs)):
            res += costs[i]
            if res == coins:
                break
            elif res > coins:
                i -= 1
                break
        return i+1
"""

# Expected = [0,2,3,1]
# tasks = [[1,2],[2,4],[3,2],[4,1]]

Expected = [4,3,2,0,1]
tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]

# Expected = [6,1,2,9,4,10,0,11,5,13,3,8,12,7]
# tasks = [[19,13],[16,9],[21,10],[32,25],[37,4],[49,24],[2,15],[38,41],[37,34],[33,6],[45,4],[18,18],[46,39],[12,24]]

# Output: [10,7,4,18,8,5,14,6,2,11,13,1,15,9,3,0,12,17,16]
# Expected = [10,7,4,18,8,5,14,2,6,11,13,1,15,9,3,0,12,17,16]
# tasks = [[23,40],[10,32],[12,18],[10,39],[25,4],[18,12],[38,18],[36,1],[26,5],[45,35],[5,43],[19,19],[46,41],[25,22],[29,17],[26,33],[49,45],[43,44],[50,2]]

# Test case #13
# Output: [109,37,172,127,184,202,177,154,186,206,174,192,204,130,248,114,220,66,227,51,117,93,103,175,94,96,33,179,45,53,56,147,82,228,47,34,63,81,2,54,143,255,38,161,199,233,183,112,178,46,258,61,67,72,191,245,10,152,55,19,92,211,29,100,49,24,60,113,257,134,74,198,243,28,236,116,151,22,75,124,58,133,132,0,216,252,125,221,237,157,11,39,259,119,238,190,200,176,68,17,102,83,111,146,69,218,270,207,85,189,35,271,235,173,27,121,182,167,205,242,219,77,180,164,244,197,12,231,57,6,104,149,123,3,165,263,31,7,90,101,213,65,89,158,225,23,234,21,118,214,251,239,40,187,226,246,18,166,131,150,217,78,84,230,196,254,223,91,14,110,208,105,142,140,209,181,162,241,126,73,50,95,88,169,138,32,1,13,16,171,141,4,256,266,193,229,188,168,250,108,268,71,76,262,194,99,148,25,156,222,87,8,210,261,159,160,160,203,115,36,30,70,80,232,137,52,260,153,120,86,185,212,64,97,155,44,195,42,98,15,224,129,26,106,48,107,43,265,201,62,79,215,267,136,135,253,269,59,5,20,9,145,249,163,170,240,247,122,41,128,139,264]
# Expected = [109,37,172,127,184,202,177,154,186,206,174,192,204,130,248,114,220,66,227,51,117,93,103,175,94,96,33,179,45,53,56,147,82,228,47,34,63,81,2,54,143,255,38,161,199,233,183,112,178,46,258,61,67,72,191,245,10,152,55,19,92,211,29,100,49,24,60,113,257,134,74,198,243,28,236,116,151,22,75,124,58,133,132,0,216,252,125,221,237,157,11,39,259,119,238,190,200,176,68,17,102,83,111,146,69,218,270,207,85,189,35,271,235,173,27,121,182,167,205,242,219,77,180,164,244,197,12,231,57,6,104,149,123,3,165,263,31,7,90,101,213,65,89,158,225,23,234,21,118,214,251,239,40,187,226,246,18,166,131,150,217,78,84,230,196,254,223,91,14,110,208,105,142,140,209,181,162,241,126,73,50,95,88,169,138,32,1,13,16,171,141,4,256,266,193,229,188,168,250,108,268,71,76,262,194,99,148,25,156,222,87,8,210,261,159,144,160,203,115,36,30,70,80,232,137,52,260,153,120,86,185,212,64,97,155,44,195,42,98,15,224,129,26,106,48,107,43,265,201,62,79,215,267,136,135,253,269,59,5,20,9,145,249,163,170,240,247,122,41,128,139,264]
# tasks = [[428,324],[844,657],[953,135],[554,527],[466,670],[112,951],[524,513],[255,530],[622,749],[910,958],[800,201],[214,353],[742,496],[435,657],[18,601],[63,855],[797,658],[755,386],[215,564],[682,218],[204,954],[904,547],[343,283],[929,542],[161,236],[111,739],[866,861],[35,442],[5,277],[333,226],[258,790],[730,529],[635,655],[640,108],[43,131],[954,431],[509,784],[350,17],[785,147],[15,359],[404,558],[804,994],[441,843],[211,899],[386,833],[99,109],[985,176],[988,130],[764,881],[990,229],[614,631],[525,66],[168,814],[651,112],[186,137],[623,212],[842,119],[605,512],[591,303],[884,948],[283,239],[164,184],[591,902],[483,131],[308,824],[686,538],[479,62],[921,186],[508,383],[258,397],[942,791],[551,703],[926,192],[296,629],[300,266],[539,296],[705,712],[361,468],[279,571],[860,902],[313,795],[665,132],[823,127],[96,388],[129,577],[301,426],[462,822],[87,746],[834,644],[523,539],[877,531],[3,595],[538,220],[296,85],[525,103],[642,632],[787,107],[687,826],[541,849],[78,734],[764,227],[428,531],[674,387],[671,97],[579,519],[151,606],[691,865],[432,893],[981,701],[1,417],[842,601],[809,389],[574,161],[893,240],[877,32],[120,768],[837,281],[554,76],[87,547],[684,366],[676,819],[410,443],[933,990],[252,523],[783,299],[604,339],[611,628],[297,39],[274,994],[922,860],[848,57],[971,569],[259,318],[81,311],[340,262],[579,922],[471,920],[479,799],[231,653],[26,998],[408,615],[215,666],[504,606],[215,140],[685,766],[739,973],[755,392],[112,119],[923,737],[790,521],[728,569],[743,282],[730,207],[237,816],[628,6],[453,831],[616,743],[564,350],[663,539],[424,763],[685,766],[229,150],[350,623],[92,979],[67,470],[419,527],[733,568],[246,447],[141,696],[249,649],[735,986],[470,664],[203,38],[818,439],[646,57],[717,100],[334,381],[455,47],[855,172],[22,108],[964,469],[101,622],[370,443],[345,152],[491,39],[830,822],[615,33],[531,560],[37,687],[52,427],[480,369],[880,192],[726,28],[898,673],[292,718],[265,835],[604,581],[105,487],[560,275],[901,150],[220,373],[672,900],[334,39],[878,767],[344,61],[484,447],[392,47],[655,422],[323,605],[370,616],[773,754],[62,224],[745,823],[360,537],[85,551],[388,910],[137,326],[519,569],[121,397],[621,456],[962,33],[829,339],[667,744],[834,586],[214,857],[50,541],[134,561],[348,63],[602,129],[207,679],[220,580],[193,503],[798,796],[574,151],[536,544],[344,435],[717,277],[774,348],[736,368],[699,555],[229,986],[487,626],[132,454],[895,276],[654,471],[471,193],[238,561],[946,989],[906,11],[8,977],[24,697],[790,553],[261,334],[19,936],[766,583],[481,146],[177,670],[878,256],[569,176],[353,359],[283,815],[308,755],[235,714],[707,528],[368,1000],[18,899],[117,670],[485,913],[238,701],[958,940],[65,419],[389,431]]
# Wrong: the task 144th is missing, extracted from the above output: (...,261,159,160,160,203,...)
# Correct:                                                           (...,261,159,144,160,203,...)
# This test case has two tasks with the same enqueue time and processing time: [685, 766], and their indexes are 144, and 160 respectively.

# Test case #11
# Output: [318,350,266,8,284,228,105,129,144,109,283,304,279,106,245,152,289,264,265,336,347,85,308,192,153,62,143,70,168,351,259,371,330,44,140,112,163,9,300,261,28,369,307,325,172,73,37,218,287,181,319,74,130,226,342,210,99,1,242,136,48,316,224,219,344,32,250,58,0,179,323,274,82,49,149,362,12,188,190,93,65,280,271,326,46,328,288,311,126,352,159,33,79,24,361,150,173,334,38,20,213,84,123,116,286,272,252,80,61,63,191,338,315,158,208,2,121,203,248,34,340,324,363,103,64,17,128,297,367,54,131,6,164,148,3,254,75,258,312,301,55,50,197,59,267,212,220,196,23,27,379,333,92,200,120,69,156,66,22,137,273,134,162,10,214,232,175,211,184,42,199,31,276,365,240,111,98,353,72,227,122,166,195,354,278,45,299,81,285,178,221,356,18,364,355,115,360,205,366,151,139,234,238,217,376,244,176,202,215,281,97,291,4,180,39,30,293,71,154,177,118,155,19,303,216,223,239,349,230,157,251,78,187,88,25,255,76,237,52,348,320,193,327,183,135,270,277,343,26,169,16,247,313,53,15,332,102,90,292,5,306,142,222,375,339,253,294,268,256,206,57,305,246,358,225,262,346,160,170,282,314,40,146,51,104,67,377,249,374,96,113,341,296,233,335,257,125,132,182,165,127,171,194,107,86,241,302,29,133,269,322,114,186,201,331,60,189,329,263,209,141,235,372,378,357,68,147,94,14,117,138,229,41,145,108,161,298,207,101,56,110,87,167,11,13,368,370,77,91,35,124,21,100,174,243,317,83,47,236,309,275,345,337,36,321,185,290,260,204,89,373,359,231,95,7,295,119,198,43,310]
# Wrong:   ,2,121,203,248,34,340,
# Correct: ,2,34,121,203,248,340,
# Expected = [318,350,266,8,284,228,105,129,144,109,283,304,279,106,245,152,289,264,265,336,347,85,308,192,153,62,143,70,168,351,259,371,330,44,140,112,163,9,300,261,28,369,307,325,172,73,37,218,287,181,319,74,130,226,342,210,99,1,242,136,48,316,224,219,344,32,250,58,0,179,323,274,82,49,149,362,12,188,190,93,65,280,271,326,46,328,288,311,126,352,159,33,79,24,361,150,173,334,38,20,213,84,123,116,286,272,252,80,61,63,191,338,315,158,208,2,34,121,203,248,340,324,363,103,64,17,128,297,367,54,131,6,164,148,3,254,75,258,312,301,55,50,197,59,267,212,220,196,23,27,379,333,92,200,120,69,156,66,22,137,273,134,162,10,214,232,175,211,184,42,199,31,276,365,240,111,98,353,72,227,122,166,195,354,278,45,299,81,285,178,221,356,18,364,355,115,360,205,366,151,139,234,238,217,376,244,176,202,215,281,97,291,4,180,39,30,293,71,154,177,118,155,19,303,216,223,239,349,230,157,251,78,187,88,25,255,76,237,52,348,320,193,327,183,135,270,277,343,26,169,16,247,313,53,15,332,102,90,292,5,306,142,222,375,339,253,294,268,256,206,57,305,246,358,225,262,346,160,170,282,314,40,146,51,104,67,377,249,374,96,113,341,296,233,335,257,125,132,182,165,127,171,194,107,86,241,302,29,133,269,322,114,186,201,331,60,189,329,263,209,141,235,372,378,357,68,147,94,14,117,138,229,41,145,108,161,298,207,101,56,110,87,167,11,13,368,370,77,91,35,124,21,100,174,243,317,83,47,236,309,275,345,337,36,321,185,290,260,204,89,373,359,231,95,7,295,119,198,43,310]
# tasks = [[544,164],[214,141],[870,310],[456,349],[804,572],[899,704],[305,337],[446,987],[411,6],[324,78],[618,430],[722,901],[49,205],[28,913],[944,875],[696,687],[30,672],[445,322],[883,505],[279,591],[354,254],[667,933],[541,417],[593,394],[137,250],[163,620],[4,665],[54,398],[412,86],[451,808],[281,575],[484,456],[872,157],[718,242],[776,311],[781,929],[829,965],[580,105],[648,253],[793,573],[991,744],[813,886],[392,455],[845,992],[921,72],[97,489],[769,232],[399,953],[3,147],[268,191],[858,374],[651,748],[566,639],[299,685],[518,333],[489,371],[268,893],[809,725],[49,163],[643,379],[424,839],[428,274],[983,57],[158,283],[986,317],[888,224],[518,415],[290,752],[513,871],[841,410],[743,61],[814,584],[602,472],[299,102],[802,122],[610,351],[716,631],[384,927],[640,612],[486,245],[743,270],[608,494],[974,186],[911,949],[917,256],[562,49],[91,795],[650,897],[977,619],[669,979],[487,695],[501,927],[445,406],[774,210],[972,874],[915,985],[542,756],[49,563],[850,466],[988,134],[852,933],[686,891],[56,694],[792,316],[407,751],[551,20],[500,32],[841,793],[374,887],[882,2],[564,893],[231,465],[116,77],[281,766],[278,826],[245,518],[572,258],[199,875],[349,587],[463,991],[912,408],[203,311],[962,478],[863,257],[276,932],[612,777],[862,236],[51,785],[364,322],[866,4],[575,124],[21,335],[891,781],[57,815],[592,425],[434,657],[325,144],[242,418],[535,881],[648,539],[992,74],[214,851],[825,710],[676,58],[246,21],[270,886],[176,745],[664,873],[919,342],[57,195],[452,251],[829,537],[94,33],[854,56],[218,585],[489,590],[402,411],[639,611],[593,305],[370,241],[983,739],[407,887],[391,429],[686,77],[275,340],[160,783],[300,479],[904,897],[259,62],[809,667],[835,740],[71,785],[286,100],[218,252],[255,943],[534,450],[477,562],[730,586],[931,499],[131,166],[330,572],[993,115],[741,781],[225,653],[507,453],[307,973],[618,829],[270,614],[42,205],[955,839],[544,208],[342,287],[661,55],[459,651],[187,787],[617,481],[320,392],[922,374],[167,991],[263,455],[218,406],[86,833],[696,562],[147,311],[579,978],[382,536],[521,719],[153,890],[814,307],[382,847],[5,132],[839,452],[332,382],[125,255],[612,431],[774,562],[281,597],[299,553],[628,109],[268,156],[831,386],[976,502],[835,711],[589,599],[559,151],[296,734],[705,124],[540,473],[78,17],[459,885],[213,604],[805,983],[709,442],[876,770],[483,542],[12,853],[448,957],[960,638],[100,548],[61,601],[717,460],[386,800],[824,142],[175,943],[764,561],[477,32],[615,731],[195,677],[278,311],[163,753],[400,160],[417,611],[675,268],[696,715],[11,350],[900,626],[219,717],[677,771],[502,356],[257,68],[637,976],[647,81],[276,736],[197,846],[860,39],[168,41],[619,5],[333,379],[680,716],[310,820],[456,663],[984,225],[790,266],[224,421],[187,182],[238,960],[632,456],[658,663],[921,488],[935,28],[503,224],[199,562],[19,743],[259,25],[795,11],[302,494],[935,260],[533,114],[261,233],[390,38],[640,975],[210,567],[849,695],[397,578],[100,715],[904,990],[569,769],[198,323],[511,887],[64,493],[570,78],[926,367],[444,804],[692,593],[451,25],[988,727],[213,707],[402,98],[480,53],[868,957],[325,997],[553,233],[624,361],[769,680],[790,743],[595,300],[975,150],[117,948],[2,805],[657,118],[473,646],[859,969],[167,820],[337,170],[907,313],[113,98],[524,225],[569,652],[195,232],[445,840],[402,69],[266,837],[599,688],[366,401],[102,252],[76,770],[44,42],[541,964],[988,289],[447,713],[525,311],[543,767],[265,125],[859,663],[426,156],[223,963],[955,737],[344,48],[600,643],[14,602],[774,4],[515,65],[16,236],[867,467],[722,487],[530,516],[404,504],[937,868],[166,731],[276,980],[359,519],[214,250],[256,198],[981,315],[416,514],[584,456],[407,536],[531,328],[499,914],[814,92],[70,926],[139,68],[992,854],[817,979],[842,753],[13,711],[494,553],[857,752],[198,860],[46,398]]


# Test case #16
# Output: [450,164,167,484,58,584,31,43,477,57,611,343,40,557,172,607,269,426,547,105,535,296,101,194,99,520,570,521,215,206,14,487,516,113,191,556,267,613,632,74,280,232,223,427,592,185,21,272,333,655,383,359,198,316,46,155,366,403,121,9,460,428,289,590,461,581,596,186,440,510,552,400,531,337,271,261,311,204,211,295,384,621,604,550,181,109,78,231,451,589,429,89,254,288,176,338,643,209,282,571,162,165,4,469,128,355,356,138,107,292,418,312,134,395,507,82,514,381,69,577,30,177,152,314,424,478,465,390,157,308,473,364,646,653,565,166,75,130,564,386,617,582,439,302,106,640,415,411,603,651,250,612,644,357,575,349,341,233,291,122,104,263,322,413,36,47,259,402,490,331,334,659,459,229,583,52,446,245,329,175,517,642,42,257,17,19,199,234,541,362,610,385,476,347,253,538,587,602,246,540,648,235,18,320,396,537,304,635,54,137,441,614,561,144,240,222,3,183,389,419,506,432,27,171,652,110,24,197,116,436,212,125,294,238,136,585,213,397,593,169,70,511,660,353,379,529,525,224,321,273,361,111,309,279,187,567,10,405,489,173,433,79,420,555,118,59,123,94,306,638,639,387,243,597,391,553,351,591,363,276,563,49,503,466,528,620,87,599,323,380,598,97,416,15,543,374,93,453,277,554,542,549,200,493,325,61,112,475,376,408,530,149,502,12,153,442,131,142,339,467,501,500,447,307,0,393,423,66,300,39,180,449,401,126,133,120,645,623,244,315,431,625,378,524,91,251,286,287,562,569,663,399,335,270,513,135,619,317,482,636,178,50,140,37,64,464,73,285,630,196,394,41,422,86,252,258,290,146,627,26,345,268,634,662,650,208,266,468,51,448,412,28,34,202,618,586,161,184,488,657,344,491,151,38,239,578,370,624,188,203,626,201,56,629,283,48,189,498,479,647,649,237,310,348,492,96,195,546,600,108,255,455,392,536,622,81,518,539,580,44,210,656,463,365,179,115,139,143,499,84,633,458,605,336,437,230,88,301,6,265,141,62,326,522,354,494,218,534,127,60,319,371,505,504,324,278,132,406,103,190,421,274,551,174,572,114,262,150,595,77,495,85,236,25,298,124,228,22,16,601,452,545,360,631,409,576,407,497,67,192,369,512,544,305,606,8,170,53,83,264,372,483,533,579,129,220,332,350,65,445,485,654,72,147,573,609,532,559,566,160,227,242,163,661,358,641,5,221,425,182,480,377,375,368,509,328,281,527,7,523,63,313,68,248,330,568,486,247,471,303,404,100,519,205,33,515,260,346,342,158,367,92,637,388,457,560,256,117,207,102,1,98,470,588,594,628,574,327,373,219,95,225,90,508,526,145,352,297,214,20,398,284,410,456,80,615,23,548,318,156,414,32,462,168,454,472,434,608,481,443,148,71,193,658,154,558,382,430,275,340,435,496,11,29,13,55,249,444,45,293,2,35,76,119,417,216,226,241,299,474,438,159,616,217]
# Expected = [450,164,167,484,58,584,31,43,477,57,611,343,40,557,172,607,269,426,547,105,535,296,101,194,99,520,570,521,215,206,14,487,113,516,191,556,267,613,632,74,280,232,223,427,592,185,21,272,333,655,383,359,198,316,46,155,366,403,121,9,460,428,289,590,461,581,596,186,440,510,552,400,531,337,271,261,311,204,211,295,384,621,604,550,181,109,78,231,451,589,429,89,254,288,176,338,643,209,282,571,162,165,4,469,128,355,356,138,107,292,418,312,134,395,507,82,514,381,69,577,30,177,152,314,424,478,465,390,157,308,473,364,646,653,565,166,75,130,564,386,617,582,439,302,106,640,415,411,603,651,250,612,644,357,575,349,341,233,291,122,104,263,322,413,36,47,259,402,490,331,334,659,459,229,583,52,446,245,329,175,517,642,42,257,17,19,199,234,541,362,610,385,476,347,253,538,587,602,246,540,648,235,18,320,396,537,304,635,54,137,441,614,561,144,240,222,3,183,389,419,506,432,27,171,652,110,24,197,116,436,212,125,294,238,136,585,213,397,593,169,70,511,660,353,379,529,525,224,321,273,361,111,309,279,187,567,10,405,489,173,433,79,420,555,118,59,123,94,306,638,639,387,243,597,391,553,351,591,363,276,563,49,503,466,528,620,87,599,323,380,598,97,416,15,543,374,93,453,277,554,542,549,200,493,325,61,112,475,376,408,530,149,502,12,153,442,131,142,339,467,501,500,447,307,0,393,423,66,300,39,180,449,401,126,133,120,645,623,244,315,431,625,378,524,91,251,286,287,562,569,663,399,335,270,513,135,619,317,482,636,178,50,140,37,64,464,73,285,630,196,394,41,422,86,252,258,290,146,627,26,345,268,634,662,650,208,266,468,51,448,412,28,34,202,618,586,161,184,488,657,344,491,151,38,239,578,370,624,188,203,626,201,56,629,283,48,189,498,479,647,649,237,310,348,492,96,195,546,600,108,255,455,392,536,622,81,518,539,580,44,210,656,463,365,179,115,139,143,499,84,633,458,605,336,437,230,88,301,6,265,141,62,326,522,354,494,218,534,127,60,319,371,505,504,324,278,132,406,103,190,421,274,551,174,572,114,262,150,595,77,495,85,236,25,298,124,228,22,16,601,452,545,360,631,409,576,407,497,67,192,369,512,544,305,606,8,170,53,83,264,372,483,533,579,129,220,332,350,65,445,485,654,72,147,573,609,532,559,566,160,227,242,163,661,358,641,5,221,425,182,480,377,375,368,509,328,281,527,7,523,63,313,68,248,330,568,486,247,471,303,404,100,519,205,33,515,260,346,342,158,367,92,637,388,457,560,256,117,207,102,1,98,470,588,594,628,574,327,373,219,95,225,90,508,526,145,352,297,214,20,398,284,410,456,80,615,23,548,318,156,414,32,462,168,454,472,434,608,481,443,148,71,193,658,154,558,382,430,275,340,435,496,11,29,13,55,249,444,45,293,2,35,76,119,417,216,226,241,299,474,438,159,616,217]
# tasks = [[32,474],[32,884],[32,981],[32,309],[32,131],[32,820],[32,678],[843,832],[843,774],[843,82],[843,387],[843,963],[843,455],[843,970],[843,24],[300,435],[300,748],[300,253],[300,283],[300,254],[300,909],[300,65],[300,744],[300,919],[300,337],[219,740],[219,559],[219,325],[219,581],[219,967],[219,164],[219,56],[219,930],[469,862],[469,581],[469,982],[469,231],[469,534],[469,595],[469,480],[469,15],[469,546],[299,252],[299,49],[299,650],[299,975],[299,79],[979,232],[979,610],[979,415],[979,532],[979,579],[979,244],[979,778],[979,292],[206,970],[206,607],[206,64],[206,12],[206,399],[206,702],[206,445],[590,682],[590,835],[590,534],[590,796],[960,475],[353,760],[353,837],[353,163],[952,360],[952,946],[952,798],[952,541],[952,51],[752,187],[752,984],[752,733],[752,116],[752,395],[752,915],[752,648],[752,159],[420,778],[420,669],[420,734],[420,549],[708,425],[708,675],[708,119],[708,901],[708,500],[665,872],[665,438],[321,402],[321,899],[321,629],[321,433],[321,886],[650,39],[650,859],[650,33],[650,883],[650,719],[650,227],[650,1],[650,199],[650,141],[895,631],[895,110],[895,333],[895,381],[895,446],[895,33],[895,728],[895,664],[895,340],[83,881],[83,397],[83,985],[83,492],[83,80],[944,226],[944,400],[659,741],[659,346],[659,490],[659,700],[659,136],[751,793],[751,187],[751,461],[21,715],[21,490],[21,154],[21,514],[21,350],[21,297],[21,139],[21,665],[21,533],[635,680],[635,461],[635,668],[635,306],[635,902],[635,556],[635,798],[635,943],[635,451],[879,729],[29,594],[29,174],[29,457],[29,949],[29,79],[29,924],[29,177],[29,869],[20,997],[20,806],[20,587],[20,127],[20,811],[20,3],[20,127],[20,186],[20,12],[20,937],[517,356],[517,776],[517,328],[517,7],[517,393],[526,724],[526,249],[526,120],[526,168],[884,527],[884,663],[884,480],[884,109],[884,823],[884,313],[884,587],[884,61],[743,89],[743,386],[743,599],[743,610],[706,719],[706,46],[706,760],[706,947],[706,7],[706,629],[706,544],[706,339],[414,75],[414,256],[347,442],[347,601],[347,581],[813,599],[813,105],[813,860],[813,40],[908,881],[908,571],[908,122],[908,650],[908,105],[908,342],[908,352],[908,908],[666,40],[666,986],[666,999],[666,698],[666,898],[666,793],[666,821],[666,308],[666,57],[666,371],[175,900],[175,986],[175,806],[175,743],[175,242],[175,674],[800,116],[800,56],[800,224],[800,258],[800,282],[469,738],[469,624],[469,347],[971,595],[971,306],[971,989],[971,808],[971,405],[461,495],[461,247],[461,277],[461,846],[461,837],[461,970],[461,217],[461,500],[461,550],[278,271],[278,119],[278,632],[278,878],[278,252],[278,551],[278,232],[278,863],[173,100],[173,728],[173,227],[173,779],[173,678],[173,575],[406,47],[406,563],[406,40],[406,511],[406,99],[406,66],[406,379],[857,720],[857,956],[857,410],[857,440],[857,714],[857,384],[857,53],[31,831],[31,126],[31,608],[31,914],[31,543],[31,500],[451,502],[451,119],[451,85],[519,551],[684,225],[684,143],[684,975],[684,346],[684,105],[684,7],[684,905],[534,740],[534,991],[534,478],[534,676],[534,197],[534,857],[534,288],[534,766],[534,403],[534,472],[89,179],[89,381],[89,624],[89,104],[89,148],[89,835],[89,174],[89,495],[492,75],[492,521],[492,920],[492,703],[492,286],[492,375],[492,227],[492,430],[492,711],[492,443],[962,685],[962,896],[962,830],[416,247],[743,837],[743,239],[743,794],[66,66],[66,239],[66,510],[66,673],[66,93],[66,120],[66,462],[66,956],[66,223],[66,864],[461,8],[461,590],[461,562],[983,863],[983,268],[983,624],[983,220],[983,794],[983,408],[983,903],[983,364],[175,695],[175,137],[175,137],[175,219],[175,812],[175,74],[59,754],[59,380],[59,260],[59,409],[59,180],[59,654],[20,79],[20,870],[20,829],[20,760],[20,596],[20,703],[20,781],[20,897],[550,436],[550,827],[550,448],[550,825],[550,499],[550,366],[109,431],[109,162],[109,954],[109,70],[109,105],[109,263],[109,189],[328,404],[328,873],[328,314],[328,176],[328,407],[328,638],[328,474],[328,545],[590,156],[590,286],[590,353],[590,913],[590,509],[590,92],[590,485],[590,237],[789,79],[9,857],[9,387],[9,718],[9,756],[9,449],[9,755],[9,914],[9,210],[9,580],[9,229],[846,929],[846,206],[846,433],[846,985],[846,144],[846,314],[846,395],[846,719],[846,547],[846,474],[545,174],[545,821],[545,38],[545,58],[545,84],[545,118],[545,954],[545,497],[357,321],[357,393],[357,939],[357,956],[357,341],[357,673],[357,992],[357,196],[516,89],[726,299],[726,460],[726,942],[726,974],[726,796],[8,246],[8,469],[8,579],[8,482],[8,152],[320,116],[320,752],[320,439],[320,938],[320,635],[320,914],[320,876],[320,671],[234,241],[900,83],[900,88],[900,936],[900,653],[900,534],[900,175],[900,422],[900,462],[900,575],[678,131],[678,886],[678,851],[286,938],[286,179],[286,991],[286,446],[286,267],[286,53],[286,174],[286,617],[286,823],[286,941],[255,524],[255,781],[57,38],[57,796],[57,843],[867,7],[867,588],[867,387],[867,238],[867,593],[703,624],[703,442],[703,696],[703,733],[703,962],[703,756],[703,613],[703,668],[703,468],[827,462],[827,454],[827,418],[827,708],[827,707],[972,317],[972,158],[972,901],[972,829],[972,89],[638,361],[638,765],[638,513],[638,159],[746,862],[746,43],[746,250],[746,648],[746,859],[746,1],[746,4],[940,690],[940,832],[940,499],[940,370],[940,901],[940,831],[940,422],[940,366],[659,449],[659,92],[659,803],[659,784],[659,699],[659,28],[659,640],[659,287],[563,275],[563,649],[563,277],[563,259],[563,441],[563,435],[563,765],[563,753],[563,630],[563,40],[689,919],[689,441],[689,108],[190,720],[190,91],[190,407],[190,440],[190,395],[486,46],[486,22],[486,950],[486,803],[486,876],[486,303],[486,506],[486,410],[486,188],[776,185],[776,804],[776,386],[776,840],[776,507],[776,2],[776,126],[425,726],[425,799],[425,891],[657,219],[657,755],[657,163],[657,595],[657,791],[657,649],[657,88],[657,191],[205,243],[205,22],[205,350],[205,583],[205,276],[205,886],[205,116],[205,86],[205,408],[537,60],[537,353],[537,888],[537,729],[537,88],[537,406],[537,432],[537,426],[537,630],[537,750],[133,276],[133,215],[133,106],[516,671],[516,771],[516,18],[516,939],[516,800],[427,262],[427,5],[427,218],[427,47],[427,299],[86,916],[584,998],[584,189],[584,582],[584,517],[584,424],[584,105],[696,647],[696,493],[696,598],[696,497],[696,599],[696,556],[696,890],[552,607],[552,543],[552,754],[552,47],[552,669],[552,567],[552,290],[552,524],[552,872],[552,403],[412,403],[412,204],[412,814],[412,250],[412,121],[208,218],[208,492],[208,180],[208,622],[911,277],[911,623],[911,570],[911,215],[911,330],[911,182],[911,796],[911,68],[911,650],[671,588],[794,947],[794,240],[794,361],[794,811],[794,569],[794,508]]

from typing import List
import collections
class Solution:
    def getOrder(self, tasks: List[List[int]]) -> List[int]:
        # the helper() function helps to pick up the next available task for CPU to process
        # the tasks with the shortest processing time are at the top of the stack
        # the function needs to check if multiple tasks have the same shortest processing time,
        # it will choose the task with the smallest index.
        def helper(stack, sortedTasks, mytasks):
            tmp_en, tmp_proc = stack[-1][0], stack[-1][1]
            minIndex = mytasks[stack[-1][0], stack[-1][1]][0]
            for t in range(len(stack)-1, -1, -1):
                if stack[t-1][1] == stack[t][1]:
                    minIndex = min(minIndex, mytasks[stack[t-1][0], stack[t-1][1]][0])
                    # if mytasks[stack[t-1][0], stack[t-1][1]] < mytasks[stack[t][0], stack[t][1]]:
                    #     tmp_en, tmp_proc = stack[t-1][0], stack[t-1][1]
                else:
                    break
            tmp_en, tmp_proc = tasks[minIndex]
            ind = mytasks[tmp_en, tmp_proc].pop(0)
            stack.remove([tmp_en, tmp_proc])
            # if ind == 487:
            #     print("487!")
            if ind == 14:
                print("14!")
                self.flag = True
            return tmp_en, tmp_proc, ind

        # for debugging
        self.flag = False
        test = []

        # sort the tasks based on the enqueueTime
        sortedTasks = sorted(tasks, key = lambda x: x[0])
        # create a map to find out the original task labels (2D array indexes)
        mytasks = collections.defaultdict(list)
        for i, (x, y) in enumerate(tasks):
            mytasks[x, y].append(i)
            # if y == 311:
            #     print(i)

        # print(tasks[487], tasks[516], tasks[113])
        # the list stack is to track the available tasks
        # the "time" is track the timing
        stack, time, isIdle = [], 0, True
        res = []
        for i in range(len(sortedTasks)):
            if mytasks[sortedTasks[i][0], sortedTasks[i][1]][0] == 113:
                print("113")
            if not stack:
                stack.append(sortedTasks[i])
            elif sortedTasks[i][0] == stack[-1][0]:
                stack.append(sortedTasks[i])
                stack.sort(key = lambda x: x[1], reverse=True)
                if self.flag:
                    print("i:",i,":",sortedTasks[i])
                    test = sorted(stack, key = lambda x: x[1])
            elif sortedTasks[i][0] != stack[-1][0]:
                if isIdle:
                    entime, proctime, index = helper(stack, sortedTasks, mytasks)
                    # entime, proctime = stack.pop()
                    # time += entime
                    time += (entime + proctime) # at what moment this task will finish
                    isIdle = False
                    stack.append(sortedTasks[i])
                    stack.sort(key = lambda x: x[1], reverse=True)
                    if self.flag:
                        print("i:",i,":",sortedTasks[i])
                        test = sorted(stack, key = lambda x: x[1])
                    res.append(index)
                    # res.append(mytasks[entime, proctime])
                    continue
                # print(sortedTasks[i][0])
                # if sortedTasks[i][0] - time == proctime:
                # at this moment the CPU finishes the task, and then starts a new one instantly
                # push the ith task into the stack, then pop a task from the stack per the constrains
                # update the result
                if sortedTasks[i][0] == time:
                    stack.append(sortedTasks[i])
                    stack.sort(key = lambda x: x[1], reverse=True)
                    if self.flag:
                        print("i:",i,":",sortedTasks[i])
                        test = sorted(stack, key = lambda x: x[1])
                    entime, proctime, index = helper(stack, sortedTasks, mytasks)
                    # entime, proctime = stack.pop()
                    # time += (entime + proctime) # at what moment this task will finish
                    time += proctime
                    isIdle = False
                    res.append(index)
                    # res.append(mytasks[entime, proctime])
                # at this moment the CPU is still processing the task, push a task into the stack
                elif sortedTasks[i][0] < time:
                    stack.append(sortedTasks[i])
                    stack.sort(key = lambda x: x[1], reverse=True)
                    if self.flag:
                        print("i:",i,":",sortedTasks[i])
                        test = sorted(stack, key = lambda x: x[1])
                # the CPU has finished the task at the moment "time"
                # the ith task enqueueTime is beyond the moment "time"
                # push the ith task into the stack, then pop the task(s) from the stack per the constrains
                # note that there may be multiple tasks to pop
                # it depends on during the window (sortedTasks[i][0]-time), how many tasks can be finished
                # at this moment, the CPU can be either still processing a task or been idle.
                elif sortedTasks[i][0] > time:
                    while stack and time < sortedTasks[i][0]:
                        if self.flag:
                            print("time:",time,":",sortedTasks[i])
                        entime, proctime, index = helper(stack, sortedTasks, mytasks)
                        # time += (entime + proctime) # at what moment this task will finish
                        time += proctime
                        res.append(index)
                        # res.append(mytasks[entime, proctime])
                    if not stack:
                        isIdle = True
                        stack.append(sortedTasks[i])
                        stack.sort(key = lambda x: x[1], reverse=True)
                        if self.flag:
                            print("i:",i,":",sortedTasks[i])
                            test = sorted(stack, key = lambda x: x[1])
                    if time > sortedTasks[i][0]:
                        stack.append(sortedTasks[i])
                        stack.sort(key = lambda x: x[1], reverse=True)
                        if self.flag:
                            print("i:",i,":",sortedTasks[i])
                            test = sorted(stack, key = lambda x: x[1])
                    elif time == sortedTasks[i][0]:
                        if self.flag:
                            test = sorted(stack, key = lambda x: x[1])
                        stack.append(sortedTasks[i])
                        stack.sort(key = lambda x: x[1], reverse=True)
                        if self.flag:
                            print("i:",i,":",sortedTasks[i])
                            test = sorted(stack, key = lambda x: x[1])
                        entime, proctime, index = helper(stack, sortedTasks, mytasks)
                        # entime, proctime = stack.pop()
                        # time += (entime + proctime) # at what moment this task will finish
                        time += proctime
                        isIdle = False
                        res.append(index)
                        # res.append(mytasks[entime, proctime])
            # print("stack:", stack)
        # the rest of the tasks in the stack
        for _ in range(len(stack)-1, -1, -1):
            entime, proctime, index = helper(stack, sortedTasks, mytasks)
            res.append(index)
            # res.append(mytasks[entime, proctime])
            # res.append(mytasks[stack[j][0], stack[j][1]])
        return res


solution = Solution()

if solution.getOrder(tasks) == Expected:
    print(True)
else:
    print(False)


# 


