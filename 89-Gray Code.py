# https://leetcode.com/problems/gray-code/

"""
Example 1:
Input: n = 2
Output: [0,1,3,2]
Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit

Example 2:
Input: n = 1
Output: [0,1]
"""


# n = 2
n = 9


# Backtracking
# Time complexity: O(n* 2 ^ n)
from typing import List
class Solution:
    def grayCode(self, n: int) -> List[int]:
        def isValid(i, c, memo):
            curr = c ^ (1 << i)
            if curr not in memo:
                return (True, curr)
            return (False, curr)

        def foundSolution(candi):
            if len(candi) == 1 << n: # 2^i can be computed by 1 << i
                return True
            return False

        def placing(i, candi, memo):
            candi.append(i)
            memo.add(i)
            return (candi, memo)

        def removing(i, candi, memo):
            candi.remove(i)
            memo.remove(i)
            return (candi, memo)

        def backtrack(candi, memo):
            if foundSolution(candi):
                return True
            for i in range(n):
                valid, current = isValid(i, candi[-1], memo) # find each possible number that can be generated by changing one bit. by toggling the ith bit at each iteration
                if valid == True:
                    candi, memo = placing(current, candi, memo)
                    if backtrack(candi, memo) == True:
                        return True
                    candi, memo = removing(current, candi, memo)
            return False

        candicate= [0]
        memo = {0}
        backtrack(candicate, memo)
        return candicate

# Runtime: 264 ms, faster than 9.71% of Python3 online submissions for Gray Code.
# Memory Usage: 101.9 MB, less than 5.19% of Python3 online submissions for Gray Code.


solution = Solution()
print(solution.grayCode(n))

